:py:mod:`exiftool.helper`
=========================

.. py:module:: exiftool.helper

.. autoapi-nested-parse::

   This submodule contains the ``ExifToolHelper`` class, which makes the core ``ExifTool`` class easier, and safer to use.

   .. note::
           :py:class:`exiftool.helper.ExifToolHelper` class of this submodule is available in the ``exiftool`` namespace as :py:class:`exiftool.ExifToolHelper`



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exiftool.helper.ExifToolHelper




Attributes
~~~~~~~~~~

.. autoapisummary::

   exiftool.helper.TUPLE_STR_BYTES


.. py:data:: TUPLE_STR_BYTES
   

   

.. py:class:: ExifToolHelper(auto_start = True, check_execute = True, check_tag_names = True, **kwargs)

   Bases: :py:obj:`exiftool.exiftool.ExifTool`

   .. autoapi-inheritance-diagram:: exiftool.helper.ExifToolHelper
      :parts: 1

   This class extends the low-level :py:class:`exiftool.ExifTool` class with 'wrapper'/'helper' functionality

   It keeps low-level core functionality with the base class but extends helper functions in a separate class

   :param bool auto_start: Will automatically start the exiftool process on first command run, defaults to True
   :param bool check_execute: Will check the exit status (return code) of all commands.  This catches some invalid commands passed to exiftool subprocess, defaults to True.  See :py:attr:`check_execute` for more info.
   :param bool check_tag_names: Will check the tag names provided to methods which work directly with tag names.  This catches unintended uses and bugs, default to True.  See :py:attr:`check_tag_names` for more info.

   :param kwargs: All other parameters are passed directly to the super-class constructor: :py:meth:`exiftool.ExifTool.__init__()`

   .. py:method:: auto_start(self)
      :property:

      Read-only property.  Gets the current setting passed into the constructor as to whether auto_start is enabled or not.

      (There's really no point to having this a read-write property, but allowing a read can be helpful at runtime to detect expected behavior.)


   .. py:method:: check_execute(self)
      :property:

      Flag to enable/disable checking exit status (return code) on execute

      If enabled, will raise :py:exc:`exiftool.exceptions.ExifToolExecuteError` if a non-zero exit status is returned during :py:meth:`execute()`

      .. warning::
              While this property is provided to give callers an option to enable/disable error checking, it is generally **NOT** recommended to disable ``check_execute``.

              **If disabled, exiftool will fail silently, and hard-to-catch bugs may arise.**

              That said, there may be some use cases where continue-on-error behavior is desired.  (Example: dump all exif in a directory with files which don't all have the same tags, exiftool returns exit code 1 for unknown files, but results are valid for other files with those tags)

      :getter: Returns current setting
      :setter: Enable or Disable the check

              .. note::
                      This settings can be changed any time and will only affect subsequent calls

      :type: bool


   .. py:method:: check_tag_names(self)
      :property:

      Flag to enable/disable checking of tag names

      If enabled, will raise :py:exc:`exiftool.exceptions.ExifToolTagNameError` if an invalid tag name is detected.

      .. warning::
              ExifToolHelper only checks the validity of the Tag **NAME** based on a simple regex pattern.

              * It *does not* validate whether the tag name is actually valid on the file type(s) you're accessing.
              * It *does not* validate whether the tag you passed in that "looks like" a tag is actually an option
              * It does support a "#" at the end of the tag name to disable print conversion

              Please refer to `ExifTool Tag Names`_ documentation for a complete list of valid tags recognized by ExifTool.

      .. warning::
              While this property is provided to give callers an option to enable/disable tag names checking, it is generally **NOT** recommended to disable ``check_tag_names``.

              **If disabled, you could accidentally edit a file when you meant to read it.**

              Example: ``get_tags("a.jpg", "tag=value")`` will call ``execute_json("-tag=value", "a.jpg")`` which will inadvertently write to a.jpg instead of reading it!

              That said, if PH's exiftool changes its tag name regex and tag names are being erroneously rejected because of this flag, disabling this could be used as a workaround (more importantly, if this is happening, please `file an issue`_!).

      :getter: Returns current setting
      :setter: Enable or Disable the check

              .. note::
                      This settings can be changed any time and will only affect subsequent calls

      :type: bool


      .. _file an issue: https://github.com/sylikc/pyexiftool/issues
      .. _ExifTool Tag Names: https://exiftool.org/TagNames/


   .. py:method:: execute(self, *params, **kwargs)

      Override the :py:meth:`exiftool.ExifTool.execute()` method

      Adds logic to auto-start if not running, if :py:attr:`auto_start` == True

      Adds logic to str() any parameter which is not a str or bytes.  (This allows passing in objects like Path _without_ casting before passing it in.)

      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


   .. py:method:: get_metadata(self, files, params = None)

      Return all metadata for the given files.

      .. note::

              This is a convenience method.

              The implementation calls :py:meth:`get_tags()` with ``tags=None``

      :param files: Files parameter matches :py:meth:`get_tags()`

      :param params: Optional parameters to send to *exiftool*
      :type params: list or None

      :return: The return value will have the format described in the documentation of :py:meth:`get_tags()`.


   .. py:method:: get_tags(self, files, tags, params = None)

      Return only specified tags for the given files.

      :param files: File(s) to be worked on.

              * If a non-iterable is provided, it will get tags for a single item (str(non-iterable))
              * If an iterable is provided, the list is passed into :py:meth:`execute_json` verbatim.

              .. note::
                      Any files/params which are not bytes/str will be casted to a str in :py:meth:`execute()`.

              .. warning::
                      Currently, filenames are NOT checked for existence!  That is left up to the caller.

              .. warning::
                      Wildcard strings are valid and passed verbatim to exiftool.

                      However, exiftool's wildcard matching/globbing may be different than Python's matching/globbing,
                      which may cause unexpected behavior if you're using one and comparing the result to the other.
                      Read `ExifTool Common Mistakes - Over-use of Wildcards in File Names`_ for some related info.

      :type files: Any or List(Any) - see Note


      :param tags: Tag(s) to read.  If tags is None, or [], method will returns all tags

              .. note::
                      The tag names may include group names, as usual in the format ``<group>:<tag>``.

      :type tags: str, list, or None


      :param params: Optional parameter(s) to send to *exiftool*
      :type params: Any, List[Any], or None


      :return: The format of the return value is the same as for :py:meth:`exiftool.ExifTool.execute_json()`.


      :raises ValueError: Invalid Parameter
      :raises TypeError: Invalid Parameter
      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


      .. _ExifTool Common Mistakes - Over-use of Wildcards in File Names: https://exiftool.org/mistakes.html#M2



   .. py:method:: run(self)

      override the :py:meth:`exiftool.ExifTool.run()` method

      Will not attempt to run if already running (so no warning about 'ExifTool already running' will trigger)


   .. py:method:: set_tags(self, files, tags, params = None)

      Writes the values of the specified tags for the given file(s).

      :param files: File(s) to be worked on.

              * If a non-iterable is provided, it will get tags for a single item (str(non-iterable))
              * If an iterable is provided, the list is passed into :py:meth:`execute_json` verbatim.

              .. note::
                      Any files/params which are not bytes/str will be casted to a str in :py:meth:`execute()`.

              .. warning::
                      Currently, filenames are NOT checked for existence!  That is left up to the caller.

              .. warning::
                      Wildcard strings are valid and passed verbatim to exiftool.

                      However, exiftool's wildcard matching/globbing may be different than Python's matching/globbing,
                      which may cause unexpected behavior if you're using one and comparing the result to the other.
                      Read `ExifTool Common Mistakes - Over-use of Wildcards in File Names`_ for some related info.

      :type files: Any or List(Any) - see Note


      :param tags: Tag(s) to write.

              Dictionary keys = tags, values = tag values (str or list)

              * If a value is a str, will set key=value
              * If a value is a list, will iterate over list and set each individual value to the same tag (

              .. note::
                      The tag names may include group names, as usual in the format ``<group>:<tag>``.

              .. note::
                      Value of the dict can be a list, in which case, the tag will be passed with each item in the list, in the order given

                      This allows setting things like ``-Keywords=a -Keywords=b -Keywords=c`` by passing in ``tags={"Keywords": ['a', 'b', 'c']}``

      :type tags: dict


      :param params: Optional parameter(s) to send to *exiftool*
      :type params: str, list, or None


      :return: The format of the return value is the same as for :py:meth:`execute()`.


      :raises ValueError: Invalid Parameter
      :raises TypeError: Invalid Parameter
      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


      .. _ExifTool Common Mistakes - Over-use of Wildcards in File Names: https://exiftool.org/mistakes.html#M2



   .. py:method:: terminate(self, **opts)

      Overrides the :py:meth:`exiftool.ExifTool.terminate()` method.

      Will not attempt to terminate if not running (so no warning about 'ExifTool not running' will trigger)

      :param opts: passed directly to the parent call :py:meth:`exiftool.ExifTool.terminate()`



