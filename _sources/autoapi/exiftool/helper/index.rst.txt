:py:mod:`exiftool.helper`
=========================

.. py:module:: exiftool.helper

.. autoapi-nested-parse::

   This contains a helper class, which makes it easier to use the low-level ExifTool class

   .. note::
           :py:class:`exiftool.helper.ExifToolHelper` class of this submodule is available in the ``exiftool`` namespace as :py:class:`exiftool.ExifToolHelper`



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exiftool.helper.ExifToolHelper




Attributes
~~~~~~~~~~

.. autoapisummary::

   exiftool.helper.basestring


.. py:data:: basestring
   

   

.. py:class:: ExifToolHelper(auto_start = True, check_execute = True, **kwargs)

   Bases: :py:obj:`exiftool.exiftool.ExifTool`

   .. autoapi-inheritance-diagram:: exiftool.helper.ExifToolHelper
      :parts: 1

   This class extends the low-level :py:class:`exiftool.ExifTool` class with 'wrapper'/'helper' functionality

   It keeps low-level core functionality with the base class but extends helper functions in a separate class

   .. py:method:: check_execute(self)
      :property:

      Flag to enable/disable checking exit status (return code) on execute

      If enabled, will raise :py:exc:`exiftool.exceptions.ExifToolExecuteError` if a non-zero exit status is returned during :py:meth:`execute()`

      .. warning::
              While this property is provided to give callers an option to enable/disable error checking, it is generally **NOT** recommended to disable ``check_execute``.

              **If disabled, exiftool will fail silently, and hard-to-catch bugs may arise.**

              That said, there may be some use cases where continue-on-error behavior is desired.

      :getter: Returns current setting
      :setter: Enable or Disable the check

              .. note::
                      This settings can be changed any time and will only affect subsequent calls

      :type: bool


   .. py:method:: execute(self, *params)

      Override the :py:meth:`exiftool.ExifTool.execute()` method

      Adds logic to auto-start if not running, if auto_start == True

      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


   .. py:method:: get_metadata(self, files, params = None)

      Return all metadata for the given files.

      :param files: Files parameter matches :py:meth:`get_tags()`

      :param params: Optional parameters to send to *exiftool*
      :type params: list or None

      :return: The return value will have the format described in the documentation of :py:meth:`get_tags()`.


   .. py:method:: get_tags(self, files, tags, params = None)

      Return only specified tags for the given files.

      :param files: File(s) to be worked on.

              If a ``str`` is provided, it will get tags for a single file

              If an interable is provided, the list is copied and any non-basestring elements are converted to str (to support ``PurePath`` and other similar objects)

              .. warning::
                      Currently, filenames are NOT checked for existence, that is left up to the caller.

                      Wildcard strings are valid and passed verbatim to exiftool.

                      However, exiftool's globbing is different than Python's globbing.  Read `ExifTool Common Mistakes - Over-use of Wildcards in File Names`_ for more info

      :type files: str or list


      :param tags: Tag(s) to read.  If tags is None, or [], method will returns all tags

              .. note::
                      The tag names may include group names, as usual in the format ``<group>:<tag>``.

      :type tags: str, list, or None


      :param params: Optional parameter(s) to send to *exiftool*
      :type params: str, list, or None


      :return: The format of the return value is the same as for :py:meth:`exiftool.ExifTool.execute_json()`.


      :raises ValueError: Invalid Parameter
      :raises TypeError: Invalid Parameter
      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


      .. _ExifTool Common Mistakes - Over-use of Wildcards in File Names: https://exiftool.org/mistakes.html#M2



   .. py:method:: run(self)

      override the :py:meth:`exiftool.ExifTool.run()` method

      Adds logic to check if already running.  Will not attempt to run if already running (so no warning about 'ExifTool already running' will trigger) 


   .. py:method:: set_tags(self, files, tags, params = None)

      Writes the values of the specified tags for the given file(s).

      :param files: File(s) to be worked on.

              If a ``str`` is provided, it will set tags for a single file

              If an interable is provided, the list is copied and any non-basestring elements are converted to str (to support ``PurePath`` and other similar objects)

              .. warning::
                      Currently, filenames are NOT checked for existence, that is left up to the caller.

                      Wildcard strings are valid and passed verbatim to exiftool.

                      However, exiftool's globbing is different than Python's globbing.  Read `ExifTool Common Mistakes - Over-use of Wildcards in File Names`_ for more info

      :type files: str or list


      :param tags: Tag(s) to write.

              Dictionary keys = tags, values = str or list

              If a value is a str, will set key=value
              If a value is a list, will iterate over list and set each individual value to the same tag (

              .. note::
                      The tag names may include group names, as usual in the format ``<group>:<tag>``.

              .. note::
                      Value of the dict can be a list, in which case, the tag will be passed with each item in the list, in the order given

                      This allows setting things like ``-Keywords=a -Keywords=b -Keywords=c`` by passing in ``tags={"Keywords": ['a', 'b', 'c']}``

      :type tags: dict


      :param params: Optional parameter(s) to send to *exiftool*
      :type params: str, list, or None


      :return: The format of the return value is the same as for :py:meth:`execute()`.


      :raises ValueError: Invalid Parameter
      :raises TypeError: Invalid Parameter
      :raises ExifToolExecuteError: If :py:attr:`check_execute` == True, and exit status was non-zero


      .. _ExifTool Common Mistakes - Over-use of Wildcards in File Names: https://exiftool.org/mistakes.html#M2



   .. py:method:: terminate(self, **opts)

      override the :py:meth:`exiftool.ExifTool.terminate()` method

      Adds logic to check if not running (so no warning about 'ExifTool not running' will trigger)

      opts are passed directly to the parent verbatim



