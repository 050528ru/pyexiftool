:py:mod:`exiftool.exiftool`
===========================

.. py:module:: exiftool.exiftool

.. autoapi-nested-parse::

   This submodule contains the core ``ExifTool`` class of PyExifTool

   .. note::
           :py:class:`exiftool.helper.ExifTool` class of this submodule is available in the ``exiftool`` namespace as :py:class:`exiftool.ExifTool`



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exiftool.exiftool.ExifTool




Attributes
~~~~~~~~~~

.. autoapisummary::

   exiftool.exiftool.ENCODING_UTF8


.. py:class:: ExifTool(executable = None, common_args = ['-G', '-n'], win_shell = False, config_file = None, encoding = None, logger=None)


   Bases: :py:obj:`object`

   Run the `exiftool` command-line tool and communicate with it.

   Use ``common_args`` to enable/disable print conversion by specifying/omitting ``-n``, respectively.
   This determines whether exiftool should perform print conversion,
   which prints values in a human-readable way but
   may be slower. If print conversion is enabled, appending ``#`` to a tag
   name disables the print conversion for this particular tag.
   See `Exiftool print conversion FAQ`_ for more details.

   .. _Exiftool print conversion FAQ: https://exiftool.org/faq.html#Q6


   Some methods of this class are only available after calling
   :py:meth:`run()`, which will actually launch the *exiftool* subprocess.
   To avoid leaving the subprocess running, make sure to call
   :py:meth:`terminate()` method when finished using the instance.
   This method will also be implicitly called when the instance is
   garbage collected, but there are circumstance when this won't ever
   happen, so you should not rely on the implicit process
   termination.  Subprocesses won't be automatically terminated if
   the parent process exits, so a leaked subprocess will stay around
   until manually killed.

   A convenient way to make sure that the subprocess is terminated is
   to use the :py:class:`ExifTool` instance as a context manager::

           with ExifTool() as et:
                   ...

   .. warning::
           Note that options and parameters are not checked.  There is no error handling or validation of options passed to *exiftool*.

           Nonsensical options are mostly silently ignored by exiftool, so there's not
           much that can be done in that regard.  You should avoid passing
           non-existent files to any of the methods, since this will lead
           to undefined behaviour.


   :param executable: Specify file name of the *exiftool* executable if it is in your ``PATH``.  Otherwise, specify the full path to the ``exiftool`` executable.

           Passed directly into :py:attr:`executable` property.

           .. note::
                   The default value :py:attr:`exiftool.constants.DEFAULT_EXECUTABLE` will only work if the executable is in your ``PATH``.

   :type executable: str, or None to use default


   :param common_args:
           Pass in additional parameters for the stay-open instance of exiftool.

           Defaults to ``["-G", "-n"]`` as this is the most common use case.

           * ``-G`` (groupName level 1 enabled) separates the output with *groupName:tag* to disambiguate same-named tags under different groups.
           * ``-n`` (print conversion disabled) improves the speed and consistency of output, and is more machine-parsable

           Passed directly into :py:attr:`common_args` property.


           .. note::
                   Depending on your use case, there may be other useful grouping levels and options.  Search `Phil Harvey's exiftool documentation`_ for **groupNames** and **groupHeadings** to get more info.



           .. _`Phil Harvey's exiftool documentation`: https://exiftool.org/exiftool_pod.html

   :type common_args: list of str, or None.

   :param bool win_shell: (Windows only) Minimizes the exiftool process.

           .. note::
                   This parameter may be deprecated in the future

   :param config_file:
           File path to ``-config`` parameter when starting exiftool process.

           Passed directly into :py:attr:`config_file` property.
   :type config_file: str, Path, or None

   :param encoding: Specify encoding to be used when communicating with
           exiftool process.  By default, will use ``locale.getpreferredencoding()``

           Passed directly into :py:attr:`encoding` property.

   :param logger: Set a custom logger to log status and debug messages to.

           Passed directly into :py:attr:`logger` property.

   .. py:property:: block_size
      :type: int

      Block size for communicating with *exiftool* subprocess.  Used when reading from the I/O pipe.

      :getter: Returns current block size

      :setter: Set a new block_size.  Does basic error checking to make sure > 0.

      :raises ValueError: If new block size is invalid

      :type: int


   .. py:property:: common_args
      :type: Optional[List[str]]

      Common Arguments executed with every command passed to *exiftool* subprocess

      This is the parameter `-common_args`_ that is passed when the *exiftool* process is STARTED

      Read `Phil Harvey's ExifTool documentation`_ to get further information on what options are available / how to use them.

      .. _-common_args: https://exiftool.org/exiftool_pod.html#Advanced-options
      .. _Phil Harvey's ExifTool documentation: https://exiftool.org/exiftool_pod.html

      :getter: Returns current common_args list

      :setter: If ``None`` is passed in, sets common_args to ``[]``.  Otherwise, sets the given list without any validation.

              .. warning::
                      No validation is done on the arguments list.  It is passed verbatim to *exiftool*.  Invalid options or combinations may result in undefined behavior.

              .. note::
                      Setting is only available when exiftool process is not running.

      :raises ExifToolRunning: If attempting to set while running (:py:attr:`running` == True)
      :raises TypeError: If setting is not a list

      :type: list[str], None


   .. py:property:: config_file
      :type: Optional[Union[str, pathlib.Path]]

      Path to config file.

      See `ExifTool documentation for -config`_ for more details.


      :getter: Returns current config file path, or None if not set

      :setter: File existence is checked when setting parameter

              * Set to ``None`` to disable the ``-config`` parameter when starting *exiftool*
              * Set to ``""`` has special meaning and disables loading of the default config file.  See `ExifTool documentation for -config`_ for more info.

              .. note::
                      Currently file is checked for existence when setting.  It is not checked when starting process.

      :raises ExifToolRunning: If attempting to set while running (:py:attr:`running` == True)

      :type: str, Path, None

      .. _ExifTool documentation for -config: https://exiftool.org/exiftool_pod.html#Advanced-options


   .. py:property:: encoding
      :type: Optional[str]

      Encoding of Popen() communication with *exiftool* process.

      :getter: Returns current encoding setting

      :setter: Set a new encoding.

              * If *new_encoding* is None, will detect it from ``locale.getpreferredencoding(do_setlocale=False)`` (do_setlocale is set to False as not to affect the caller).
              * Default to ``utf-8`` if nothing is returned by ``getpreferredencoding``

              .. warning::
                      Property setter does NOT validate the encoding for validity.  It is passed verbatim into subprocess.Popen()

              .. note::
                      Setting is only available when exiftool process is not running.

      :raises ExifToolRunning: If attempting to set while running (:py:attr:`running` == True)



   .. py:property:: executable
      :type: Union[str, pathlib.Path]

      Path to *exiftool* executable.

      :getter: Returns current exiftool path
      :setter: Specify just the executable name, or an absolute path to the executable.
              If path given is not absolute, searches environment ``PATH``.

              .. note::
                      Setting is only available when exiftool process is not running.

      :raises ExifToolRunning: If attempting to set while running (:py:attr:`running` == True)
      :type: str, Path


   .. py:property:: last_status
      :type: Optional[int]

      ``Exit Status Code`` for most recent result from execute()

      .. note::
              This property can be read at any time, and is not dependent on running state of ExifTool.

              It is INTENTIONALLY *NOT* CLEARED on exiftool termination, to allow
              for executing a command and terminating, but still having the result available.


   .. py:property:: last_stderr
      :type: Optional[Union[str, bytes]]

      ``STDERR`` for most recent result from execute()

      .. note::
              The return type can be either ``str`` or ``bytes``.

              If the most recent call to execute() ``raw_bytes=True``, then this will return ``bytes``.  Otherwise this will be ``str``.

      .. note::
              This property can be read at any time, and is not dependent on running state of ExifTool.

              It is INTENTIONALLY *NOT* CLEARED on exiftool termination, to allow
              for executing a command and terminating, but still having the result available.


   .. py:property:: last_stdout
      :type: Optional[Union[str, bytes]]

      ``STDOUT`` for most recent result from execute()

      .. note::
              The return type can be either str or bytes.

              If the most recent call to execute() ``raw_bytes=True``, then this will return ``bytes``.  Otherwise this will be ``str``.

      .. note::
              This property can be read at any time, and is not dependent on running state of ExifTool.

              It is INTENTIONALLY *NOT* CLEARED on exiftool termination, to allow
              for executing a command and terminating, but still having the result available.


   .. py:property:: running
      :type: bool

      Read-only property which indicates whether the *exiftool* subprocess is running or not.

      :getter: Returns current running state

              .. note::
                      This checks to make sure the process is still alive.

                      If the process has died since last `running` detection, this property
                      will detect the state change and reset the status accordingly.


   .. py:property:: version
      :type: str

      Read-only property which is the string returned by ``exiftool -ver``

      The *-ver* command is ran once at process startup and cached.

      :getter: Returns cached output of ``exiftool -ver``

      :raises ExifToolNotRunning: If attempting to read while not running (:py:attr:`running` == False)


   .. py:attribute:: logger

      Write-only property to set the class of logging.Logger

      If this is set, then status messages will log out to the given class.

      .. note::
              This can be set and unset (set to ``None``) at any time, regardless of whether the subprocess is running (:py:attr:`running` == True) or not.

      :setter: Specify an object to log to.  The class is not checked, but validation is done to ensure the object has callable methods ``info``, ``warning``, ``error``, ``critical``, ``exception``.

      :raises AttributeError: If object does not contain one or more of the required methods.
      :raises TypeError: If object contains those attributes, but one or more are non-callable methods.

      :type: Object


   .. py:method:: __del__()


   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_val, exc_tb)


   .. py:method:: execute(*params, raw_bytes = False)

      Execute the given batch of parameters with *exiftool*.

      This method accepts any number of parameters and sends them to
      the attached ``exiftool`` subprocess.  The process must be
      running, otherwise :py:exc:`exiftool.exceptions.ExifToolNotRunning` is raised.  The final
      ``-execute`` necessary to actually run the batch is appended
      automatically; see the documentation of :py:meth:`run()` for
      the common options.  The ``exiftool`` output is read up to the
      end-of-output sentinel and returned as a ``str`` decoded
      based on the currently set :py:attr:`encoding`,
      excluding the sentinel.

      The parameters must be of type ``str`` or ``bytes``.
      ``str`` parameters are encoded to bytes automatically using the :py:attr:`encoding` property.
      For filenames, this should be the system's filesystem encoding.
      ``bytes`` parameters are untouched and passed directly to ``exiftool``.

      .. note::
              This is the core method to interface with the ``exiftool`` subprocess.

              No processing is done on the input or output.

      :param params: One or more parameters to send to the ``exiftool`` subprocess.

              Typically passed in via `Unpacking Argument Lists`_

              .. note::
                      The parameters to this function must be type ``str`` or ``bytes``.

      :type params: one or more string/bytes parameters

      :param raw_bytes: If True, returns bytes.  Default behavior returns a str


      :return:
              * STDOUT is returned by the method call, and is also set in :py:attr:`last_stdout`
              * STDERR is set in :py:attr:`last_stderr`
              * Exit Status of the command is set in :py:attr:`last_status`

      :raises ExifToolNotRunning: If attempting to execute when not running (:py:attr:`running` == False)
      :raises ExifToolVersionError: If unexpected text was returned from the command while parsing out the sentinels
      :raises UnicodeDecodeError: If the :py:attr:`encoding` is not specified properly, it may be possible for ``.decode()`` method to raise this error
      :raises TypeError: If ``params`` argument is not ``str`` or ``bytes``


      .. _Unpacking Argument Lists: https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists


   .. py:method:: execute_json(*params)

      Execute the given batch of parameters and parse the JSON output.

      This method is similar to :py:meth:`execute()`.  It
      automatically adds the parameter ``-j`` to request JSON output
      from ``exiftool`` and parses the output.

      The return value is
      a list of dictionaries, mapping tag names to the corresponding
      values.  All keys are strings.
      The values can have multiple types.  Each dictionary contains the
      name of the file it corresponds to in the key ``"SourceFile"``.

      .. note::
              By default, the tag names include the group name in the format <group>:<tag> (if using the ``-G`` option).

              You can adjust the output structure with various *exiftool* options.

      .. warning::
              This method does not verify the exit status code returned by *exiftool*.  That is left up to the caller.

              This will mimic exiftool's default method of operation "continue on error" and "best attempt" to complete commands given.

              If you want automated error checking, use :py:class:`exiftool.ExifToolHelper`

      :param params: One or more parameters to send to the ``exiftool`` subprocess.

              Typically passed in via `Unpacking Argument Lists`_

              .. note::
                      The parameters to this function must be type ``str`` or ``bytes``.

      :type params: one or more string/bytes parameters

      :return: Valid JSON parsed into a Python list of dicts
      :raises ExifToolOutputEmptyError: If *exiftool* did not return any STDOUT

              .. note::
                      This is not necessarily an *exiftool* error, but rather a programmer error.

                      For example, setting tags can cause this behavior.

                      If you are executing a command and expect no output, use :py:meth:`execute()` instead.

      :raises ExifToolJSONInvalidError: If *exiftool* returned STDOUT which is invalid JSON.

              .. note::
                      This is not necessarily an *exiftool* error, but rather a programmer error.

                      For example, ``-w`` can cause this behavior.

                      If you are executing a command and expect non-JSON output, use :py:meth:`execute()` instead.


      .. _Unpacking Argument Lists: https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists


   .. py:method:: run()

      Start an *exiftool* subprocess in batch mode.

      This method will issue a ``UserWarning`` if the subprocess is
      already running (:py:attr:`running` == True).  The process is started with :py:attr:`common_args` as common arguments,
      which are automatically included in every command you run with :py:meth:`execute()`.

      You can override these default arguments with the
      ``common_args`` parameter in the constructor or setting :py:attr:`common_args` before caaling :py:meth:`run()`.

      .. note::
              If you have another executable named *exiftool* which isn't Phil Harvey's ExifTool, then you're shooting yourself in the foot as there's no error checking for that

      :raises FileNotFoundError: If *exiftool* is no longer found.  Re-raised from subprocess.Popen()
      :raises OSError: Re-raised from subprocess.Popen()
      :raises ValueError: Re-raised from subprocess.Popen()
      :raises subproccess.CalledProcessError: Re-raised from subprocess.Popen()
      :raises RuntimeError: Popen() launched process but it died right away
      :raises ExifToolVersionError: :py:attr:`exiftool.constants.EXIFTOOL_MINIMUM_VERSION` not met.  ExifTool process will be automatically terminated.


   .. py:method:: set_json_loads(json_loads, **kwargs)

      **Advanced**: Override default built-in ``json.loads()`` method.  The method is only used once in :py:meth:`execute_json`

      This allows using a different json string parser.

      (Alternate json libraries typically provide faster speed than the
      built-in implementation, more supported features, and/or different behavior.)

      Examples of json libraries: `orjson`_, `rapidjson`_, `ujson`_, ...

      .. note::
              This method is designed to be called the same way you would expect to call the provided ``json_loads`` method.

              Include any ``kwargs`` you would in the call.

              For example, to pass additional arguments to ``json.loads()``: ``set_json_loads(json.loads, parse_float=str)``

      .. note::
              This can be set at any time, regardless of whether the subprocess is running (:py:attr:`running` == True) or not.

      .. warning::
              This setter does not check whether the method provided actually parses json.  Undefined behavior or crashes may occur if used incorrectly

              This is **advanced configuration** for specific use cases only.

              For an example use case, see the :ref:`FAQ <set_json_loads faq>`

      :param json_loads: A callable method to replace built-in ``json.loads`` used in :py:meth:`execute_json`

      :type json_loads: callable

      :param kwargs: Parameters passed to the ``json_loads`` method call

      :raises TypeError: If ``json_loads`` is not callable


      .. _orjson: https://pypi.org/project/orjson/
      .. _rapidjson: https://pypi.org/project/python-rapidjson/
      .. _ujson: https://pypi.org/project/ujson/


   .. py:method:: terminate(timeout = 30, _del = False)

      Terminate the *exiftool* subprocess.

      If the subprocess isn't running, this method will throw a warning, and do nothing.

      .. note::
              There is a bug in CPython 3.8+ on Windows where terminate() does not work during ``__del__()``

              See CPython issue `starting a thread in __del__ hangs at interpreter shutdown`_ for more info.

      .. _starting a thread in __del__ hangs at interpreter shutdown: https://github.com/python/cpython/issues/87950



.. py:data:: ENCODING_UTF8
   :type: str
   :value: 'utf-8'

   

